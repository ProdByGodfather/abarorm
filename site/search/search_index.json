{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to AbarORM","text":"<p> abarorm is a lightweight and easy-to-use Object-Relational Mapping (ORM) library for SQLite databases in Python. It aims to provide a simple and intuitive interface for managing database models and interactions.      </p>"},{"location":"#features","title":"Features","text":"<ul> <li>Define models using Python classes</li> <li>Automatically handle database schema creation and management</li> <li>Support for basic CRUD operations</li> <li>Foreign key relationships</li> <li>Custom field types with validation and constraints</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>You can install abarorm from PyPI using pip:</p> <pre><code>pip install abarorm\n</code></pre> <p>For MySQL support, you also need to install <code>mysql-connector-python</code>:</p> <pre><code>pip install mysql-connector-python\n</code></pre>"},{"location":"Introduction/","title":"Introduction to AbarORM","text":""},{"location":"Introduction/#what-is-abarorm","title":"What is AbarORM?","text":"<p>AbarORM is a lightweight and easy-to-use Object-Relational Mapping (ORM) library designed for SQLite databases in Python. It provides a simple and intuitive interface for managing database models and interactions, making it easier for developers to work with databases without needing to write raw SQL queries.</p>"},{"location":"Introduction/#key-features","title":"Key Features","text":"<ul> <li>Simplicity: AbarORM is designed to be straightforward and easy to use. With a clean API, you can define your database models and interact with your database using Python objects.</li> <li>Automatic Schema Management: The library handles the creation and management of the database schema automatically, so you don't have to worry about writing migration scripts.</li> <li>CRUD Operations: It supports all basic CRUD (Create, Read, Update, Delete) operations, allowing you to perform database operations with minimal code.</li> <li>Relationships: AbarORM supports foreign key relationships between models, making it easier to manage complex data structures.</li> <li>Custom Fields: You can define custom field types with validation and constraints to suit your specific needs.</li> </ul>"},{"location":"Introduction/#why-choose-abarorm","title":"Why Choose AbarORM?","text":""},{"location":"Introduction/#django-orm-like-experience","title":"Django ORM-Like Experience","text":"<p>If you're familiar with Django ORM, you'll find AbarORM's approach to database modeling and interactions quite familiar. AbarORM follows many of the same principles and patterns found in Django ORM, such as:</p> <ul> <li>Model Definition: Just like in Django ORM, you define your database tables using Python classes. Each class represents a table, and class attributes define the columns of the table.</li> <li>Field Types: AbarORM uses similar field types to Django ORM (e.g., <code>CharField</code>, <code>DateTimeField</code>, <code>ForeignKey</code>), making it easy for Django users to adapt to AbarORM.</li> <li>Automatic Schema Management: Similar to Django's migrations, AbarORM handles schema creation and updates automatically based on your model definitions.</li> </ul>"},{"location":"Introduction/#ease-of-use","title":"Ease of Use","text":"<p>AbarORM aims to reduce the complexity associated with database interactions. By abstracting away the details of SQL queries and database management, it allows developers to focus more on writing application logic rather than dealing with database intricacies.</p>"},{"location":"Introduction/#flexibility","title":"Flexibility","text":"<p>While it is lightweight, AbarORM is flexible enough to handle various use cases. Whether you're working on a small personal project or a more complex application, AbarORM can adapt to your needs.</p>"},{"location":"Introduction/#pythonic-approach","title":"Pythonic Approach","text":"<p>The library follows Pythonic principles, offering a seamless integration with Python's data structures and object-oriented features. This approach ensures that working with your database feels natural and intuitive.</p>"},{"location":"Introduction/#getting-started","title":"Getting Started","text":"<p>To get started with AbarORM, follow these steps:</p> <ol> <li>Installation: Install the library via pip:    <pre><code>pip install abarorm\n</code></pre> Setup: Configure your database connection and define your models by inheriting from <code>SQLiteModel</code> or <code>MySQLModel</code> depending on your database type.</li> </ol> <p>Define Models: Create Python classes that represent your database tables. Use built-in field types to define the attributes of each model.</p> <p>Create Tables: Use the create_table method to initialize your database schema.</p> <p>Perform Operations: Use the methods provided by AbarORM to perform CRUD operations, manage relationships, and query your data.</p> <p>For detailed instructions and examples, refer to the Basic Usage section of the documentation.</p>"},{"location":"Introduction/#example","title":"Example","text":"<p>Here's a quick example of defining a simple model with AbarORM on SQLite: <pre><code>from abarorm import SQLiteModel\nfrom abarorm.fields import CharField, DateTimeField\n\nDATABASE_CONFIG = {\n    'sqlite': {\n        'db_name': 'example.db',\n    }\n}\n\nclass Category(SQLiteModel):\n    table_name = 'categories'\n    title = CharField(max_length=200, unique=True)\n\n    def __init__(self, **kwargs):\n        super().__init__(db_config=DATABASE_CONFIG['sqlite'], **kwargs)\n\n# Create the table in the database\nCategory.create_table()\n\n# Add a new category\nCategory.create(title='Movies')\n</code></pre></p>"},{"location":"api_refrence/","title":"API Reference for AbarORM","text":"<p>This page provides a detailed reference for the classes and methods available in the AbarORM library. The API reference is intended for developers who need a comprehensive understanding of how to use AbarORM's features.</p>"},{"location":"api_refrence/#classes","title":"Classes","text":""},{"location":"api_refrence/#1-sqlitemodel","title":"1. <code>SQLiteModel</code>","text":"<p>The <code>SQLiteModel</code> class is the base class for defining models that interact with an SQLite database.</p>"},{"location":"api_refrence/#methods","title":"Methods","text":"<ul> <li><code>__init__(self, db_config, **kwargs)</code></li> <li>Description: Initializes the model with the given database configuration.</li> <li> <p>Parameters:</p> <ul> <li><code>db_config</code>: Dictionary containing the database configuration.</li> <li><code>**kwargs</code>: Additional keyword arguments.</li> </ul> </li> <li> <p><code>create_table(cls)</code></p> </li> <li>Description: Creates the table in the SQLite database based on the model definition.</li> <li> <p>Parameters: None</p> </li> <li> <p><code>drop_table(cls)</code></p> </li> <li>Description: Drops the table from the SQLite database.</li> <li> <p>Parameters: None</p> </li> <li> <p><code>save(self)</code></p> </li> <li>Description: Saves the current instance to the database. If it\u2019s a new record, it will be inserted; if it exists, it will be updated.</li> <li> <p>Parameters: None</p> </li> <li> <p><code>delete(self)</code></p> </li> <li>Description: Deletes the current instance from the database.</li> <li> <p>Parameters: None</p> </li> <li> <p><code>get(cls, id)</code></p> </li> <li>Description: Retrieves a single record by its ID.</li> <li> <p>Parameters:</p> <ul> <li><code>id</code>: The ID of the record to retrieve.</li> </ul> </li> <li> <p><code>all(cls)</code></p> </li> <li>Description: Retrieves all records from the table.</li> <li> <p>Parameters: None</p> </li> <li> <p><code>filter(cls, **kwargs)</code></p> </li> <li>Description: Retrieves records that match the specified criteria.</li> <li>Parameters:<ul> <li><code>**kwargs</code>: Criteria for filtering records.</li> </ul> </li> </ul>"},{"location":"api_refrence/#2-mysqlmodel","title":"2. <code>MySQLModel</code>","text":"<p>The <code>MySQLModel</code> class is similar to <code>SQLiteModel</code> but designed for MySQL databases. It provides the same methods as <code>SQLiteModel</code> but interacts with MySQL instead.</p>"},{"location":"api_refrence/#methods_1","title":"Methods","text":"<p>The methods for <code>MySQLModel</code> are identical to those for <code>SQLiteModel</code>, with differences primarily in how they interact with the MySQL database.</p>"},{"location":"api_refrence/#fields","title":"Fields","text":""},{"location":"api_refrence/#1-charfield","title":"1. <code>CharField</code>","text":"<ul> <li>Description: Represents a text field with a maximum length.</li> <li>Parameters:</li> <li><code>max_length</code>: Maximum number of characters allowed.</li> <li><code>unique</code>: Whether the field must contain unique values.</li> <li><code>null</code>: Whether the field can be <code>NULL</code>.</li> <li><code>default</code>: Default value if none is provided.</li> </ul>"},{"location":"api_refrence/#2-datetimefield","title":"2. <code>DateTimeField</code>","text":"<ul> <li>Description: Represents a date and time value.</li> <li>Parameters:</li> <li><code>auto_now</code>: Automatically set to the current date and time on updates.</li> </ul>"},{"location":"api_refrence/#3-foreignkey","title":"3. <code>ForeignKey</code>","text":"<ul> <li>Description: Represents a many-to-one relationship between models.</li> <li>Parameters:</li> <li><code>to</code>: The model this field points to.</li> <li><code>on_delete</code>: Behavior when the referenced record is deleted.</li> </ul>"},{"location":"api_refrence/#4-booleanfield","title":"4. <code>BooleanField</code>","text":"<ul> <li>Description: Represents a Boolean value.</li> <li>Parameters:</li> <li><code>default</code>: Default value if none is provided.</li> <li><code>null</code>: Whether the field can be <code>NULL</code>.</li> </ul>"},{"location":"api_refrence/#5-integerfield","title":"5. <code>IntegerField</code>","text":"<ul> <li>Description: Represents an integer value.</li> <li>Parameters:</li> <li><code>default</code>: Default value if none is provided.</li> <li><code>null</code>: Whether the field can be <code>NULL</code>.</li> </ul>"},{"location":"api_refrence/#6-floatfield","title":"6. <code>FloatField</code>","text":"<ul> <li>Description: Represents a floating-point number.</li> <li>Parameters:</li> <li><code>default</code>: Default value if none is provided.</li> <li><code>null</code>: Whether the field can be <code>NULL</code>.</li> </ul>"},{"location":"api_refrence/#7-emailfield","title":"7. <code>EmailField</code>","text":"<ul> <li>Description: Represents an email address.</li> <li>Parameters:</li> <li><code>max_length</code>: Maximum number of characters allowed.</li> <li><code>unique</code>: Whether the field must contain unique values.</li> </ul>"},{"location":"api_refrence/#8-urlfield","title":"8. <code>URLField</code>","text":"<ul> <li>Description: Represents a URL.</li> <li>Parameters:</li> <li><code>max_length</code>: Maximum number of characters allowed.</li> </ul>"},{"location":"api_refrence/#9-textfield","title":"9. <code>TextField</code>","text":"<ul> <li>Description: Represents a large text field for storing long texts.</li> <li>Parameters:</li> <li><code>null</code>: Whether the field can be <code>NULL</code>.</li> </ul>"},{"location":"api_refrence/#10-decimalfield","title":"10. <code>DecimalField</code>","text":"<ul> <li>Description: Represents a decimal number with fixed precision.</li> <li>Parameters:</li> <li><code>max_digits</code>: Maximum number of digits allowed.</li> <li><code>decimal_places</code>: Number of decimal places to store.</li> <li><code>default</code>: Default value if none is provided.</li> </ul>"},{"location":"api_refrence/#query-methods","title":"Query Methods","text":""},{"location":"api_refrence/#1-createcls-kwargs","title":"1. <code>create(cls, **kwargs)</code>","text":"<ul> <li>Description: Creates a new record with the specified data.</li> <li>Parameters:</li> <li><code>**kwargs</code>: Data for the new record.</li> </ul>"},{"location":"api_refrence/#2-updatecls-id-kwargs","title":"2. <code>update(cls, id, **kwargs)</code>","text":"<ul> <li>Description: Updates an existing record with new data.</li> <li>Parameters:</li> <li><code>id</code>: ID of the record to update.</li> <li><code>**kwargs</code>: New data for the record.</li> </ul>"},{"location":"api_refrence/#3-deletecls-id","title":"3. <code>delete(cls, id)</code>","text":"<ul> <li>Description: Deletes a record by its ID.</li> <li>Parameters:</li> <li><code>id</code>: ID of the record to delete.</li> </ul>"},{"location":"api_refrence/#summary","title":"Summary","text":"<p>This API reference provides an overview of the core classes, methods, and fields available in AbarORM. For more detailed examples and use cases, refer to the Basic Usage section.</p> <p>If you have any questions or need further assistance, please check the Documentation or reach out to the community via our GitHub repository.</p> <p>Happy coding with AbarORM!</p>"},{"location":"basic_usage/","title":"Basic Usage of AbarORM","text":""},{"location":"basic_usage/#overview","title":"Overview","text":"<p>In this section, we will cover the basic usage of AbarORM, including how to define models, create tables, and perform basic CRUD operations. This guide assumes you have already installed AbarORM and are familiar with Python.</p>"},{"location":"basic_usage/#step-1-define-your-models","title":"Step 1: Define Your Models","text":"<p>To start using AbarORM, you first need to define your database models. Each model corresponds to a table in your database. Here\u2019s how you can define a simple model:</p>"},{"location":"basic_usage/#example-defining-models","title":"Example: Defining Models","text":"<p><pre><code>from abarorm import SQLiteModel\nfrom abarorm.fields import CharField, DateTimeField, ForeignKey\n\n# Database configuration\nDATABASE_CONFIG = {\n    'sqlite': {\n        'db_name': 'example.db',  # Name of the SQLite database file\n    }\n}\n\n# Define the Category model\nclass Category(SQLiteModel):\n    table_name = 'categories'\n    title = CharField(max_length=200, unique=True)\n\n    def __init__(self, **kwargs):\n        super().__init__(db_config=DATABASE_CONFIG['sqlite'], **kwargs)\n\n# Define the Post model\nclass Post(SQLiteModel):\n    table_name = 'posts'\n    title = CharField(max_length=100, unique=True)\n    create_time = DateTimeField(auto_now=True)\n    category = ForeignKey(Category)\n\n    def __init__(self, **kwargs):\n        super().__init__(db_config=DATABASE_CONFIG['sqlite'], **kwargs)\n</code></pre> In the example above:</p> <p>Category and Post are two models representing database tables. Each class inherits from <code>SQLiteModel</code> and defines fields using AbarORM\u2019s built-in field types.</p>"},{"location":"basic_usage/#step-2-create-tables","title":"Step 2: Create Tables","text":"<p>After defining your models, you need to create the corresponding tables in the database. Use the create_table method provided by AbarORM. <pre><code># Create tables in the database\nif __name__ == \"__main__\":\n    Category.create_table()\n    Post.create_table()\n</code></pre> This script will create the tables <code>categories</code> and <code>posts</code> in the example.db <code>SQLite</code> database file.</p>"},{"location":"basic_usage/#step-3-perform-crud-operations","title":"Step 3: Perform CRUD Operations","text":"<p>Once your tables are created, you can perform CRUD (Create, Read, Update, Delete) operations on your models.</p>"},{"location":"basic_usage/#create-records","title":"Create Records","text":"<p>To add new records to the database, use the <code>create</code> method: <pre><code># Add a new category\nCategory.create(title='Movies')\n\n# Add a new post\ncategory = Category.get(id=1)  # Fetch the category with ID 1\nif category:\n    Post.create(title='Godfather', category=category.id)\n</code></pre></p>"},{"location":"basic_usage/#read-records","title":"Read Records","text":"<p>To retrieve records from the database, use the <code>all</code>, <code>get</code>, or <code>filter</code> methods: <pre><code># Retrieve all posts\nall_posts = Post.all()\nprint(\"All Posts:\", [(post.title, post.category) for post in all_posts])\n\n# Retrieve a specific post\npost_data = Post.get(id=1)\nif post_data:\n    print(\"Post with ID 1:\", post_data.title, post_data.category)\n\n# Filter posts by category\nfiltered_posts = Post.filter(category=category.id)\nprint(\"Filtered Posts:\", [(post.title, post.category) for post in filtered_posts])\n</code></pre></p>"},{"location":"basic_usage/#update-records","title":"Update Records","text":"<p>To update existing records, use the <code>update</code> method: <pre><code># Update a post\nPost.update(id=1, title='The Godfather Part II')\n</code></pre></p>"},{"location":"basic_usage/#delete-records","title":"Delete Records","text":"<p>To delete records, use the <code>delete</code> method: <pre><code># Delete a post\nPost.delete(1)\n</code></pre></p>"},{"location":"basic_usage/#handling-relationships","title":"Handling Relationships","text":"<p>Handling Relationships AbarORM supports foreign key relationships between models. In the example provided, the <code>Post</code> model has a foreign key relationship with the <code>Category</code> model. This allows you to create complex data structures and manage related data efficiently.</p>"},{"location":"basic_usage/#example-accessing-related-data","title":"Example: Accessing Related Data","text":"<pre><code># Access the category of a post\npost = Post.get(id=1)\nif post:\n    category = Category.get(id=post.category)\n    print(\"Post Category:\", category.title)\n</code></pre>"},{"location":"basic_usage/#summary","title":"Summary","text":"<p>This guide covered the basic usage of AbarORM, including model definition, table creation, and CRUD operations. For more advanced features and configurations, refer to the Field Types section.</p>"},{"location":"field_types/","title":"Field Types in AbarORM","text":"<p>In AbarORM, fields define the types of data stored in your database models. Each field type represents a specific kind of data and provides options for validation and constraints. This guide covers the available field types and their usage.</p>"},{"location":"field_types/#basic-field-types","title":"Basic Field Types","text":""},{"location":"field_types/#1-charfield","title":"1. CharField","text":"<ul> <li>Description: Represents a text field with a maximum length.</li> <li>Parameters:</li> <li><code>max_length</code>: The maximum number of characters allowed.</li> <li><code>unique</code>: If <code>True</code>, the field must contain unique values across the table.</li> <li><code>null</code>: If <code>True</code>, the field can contain <code>NULL</code> values.</li> <li><code>default</code>: The default value if none is provided.</li> <li>Example:   <pre><code>title = CharField(max_length=100, unique=True)\n</code></pre></li> </ul>"},{"location":"field_types/#2-datetimefield","title":"2. DateTimeField","text":"<ul> <li>Description: Represents a date and time value.</li> <li>Parameters:<ul> <li><code>auto_now:</code> If True, the field will be automatically set to the current date and time whenever the record is updated.</li> </ul> </li> <li>Example: <pre><code>create_time = DateTimeField(auto_now=True)\n</code></pre></li> </ul>"},{"location":"field_types/#3-foreignkey","title":"3. ForeignKey","text":"<ul> <li>Description: Represents a many-to-one relationship between models.</li> <li> <p>Parameters:</p> <ul> <li><code>to:</code> The model that this field points to.</li> <li><code>on_delete:</code> Defines the behavior when the referenced record is deleted. Common options include:</li> <li><code>CASCADE:</code> Automatically delete records that reference the deleted record.</li> <li><code>SET NULL:</code> Set the field to NULL when the referenced record is deleted.</li> <li><code>PROTECT:</code> Prevent deletion of the referenced record by raising an error.</li> <li><code>SET_DEFAULT:</code> Set the field to a default value when the referenced record is deleted.</li> <li><code>DO_NOTHING:</code> Do nothing and leave the field unchanged.</li> </ul> </li> <li> <p>Example: <pre><code>category = ForeignKey(Category, on_delete='CASCADE')\n</code></pre></p> </li> </ul>"},{"location":"field_types/#4-booleanfield","title":"4. BooleanField","text":"<ul> <li>Description: Represents a Boolean value (<code>True</code> or <code>False</code>).</li> <li>Parameters:<ul> <li><code>default:</code> The default value for the field if none is provided.</li> <li><code>null:</code> If True, the field can contain NULL values.</li> </ul> </li> <li>Example: <pre><code>is_active = BooleanField(default=True)\n</code></pre></li> </ul>"},{"location":"field_types/#5-integerfield","title":"5. IntegerField","text":"<ul> <li>Description: Represents an integer value.</li> <li>Parameters:<ul> <li><code>default:</code> The default value for the field if none is provided.</li> <li><code>null:</code> If True, the field can contain NULL values.</li> </ul> </li> <li>Example: <pre><code>age = IntegerField(default=0)\n</code></pre></li> </ul>"}]}